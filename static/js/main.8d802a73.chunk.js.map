{"version":3,"sources":["components/tablecomponent/table.js","App.js","index.js"],"names":["Table","columns","data","useTable","useSortBy","getTableProps","headerGroups","getTableBodyProps","rows","prepareRow","TableHead","map","headerGroup","TableRow","getHeaderGroupProps","headers","column","TableCell","getHeaderProps","getSortByToggleProps","className","isSorted","isSortedDesc","render","TableBody","row","i","getRowProps","cells","cell","getCellProps","App","useState","setData","useMemo","Header","accessor","Cell","value","src","width","filterMethod","filter","id","startsWith","endsWith","useEffect","a","axios","result","console","log","results","filterable","defaultFilterMethod","String","ReactDOM","StrictMode","document","getElementById"],"mappings":"0RASe,SAASA,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,QAASC,EAAQ,EAARA,KAAQ,EAY3CC,mBACF,CACAF,UACAC,QAGFE,aAZEC,EAN6C,EAM7CA,cAEAC,GAR6C,EAO7CC,kBAP6C,EAQ7CD,cACAE,EAT6C,EAS7CA,KACAC,EAV6C,EAU7CA,WAgCF,OAEE,eAAC,IAAD,2BAAcJ,KAAd,cACE,cAACK,EAAA,EAAD,UACGJ,EAAaK,KAAI,SAAAC,GAAW,OAC3B,cAACC,EAAA,EAAD,2BAAcD,EAAYE,uBAA1B,aACGF,EAAYG,QAAQJ,KAAI,SAAAK,GAAM,OAC7B,cAACC,EAAA,EAAD,2BAAeD,EAAOE,eAAeF,EAAOG,yBAA5C,IACAC,UACEJ,EAAOK,SACHL,EAAOM,aACL,YACA,WACF,GANN,SAQGN,EAAOO,OAAO,wBAMzB,cAACC,EAAA,EAAD,UACGhB,EAAKG,KAAI,SAACc,EAAKC,GAEd,OADAjB,EAAWgB,GAET,cAACZ,EAAA,EAAD,2BAAcY,EAAIE,eAAlB,aACGF,EAAIG,MAAMjB,KAAI,SAAAkB,GACb,OACE,cAACZ,EAAA,EAAD,2BAAeY,EAAKC,gBAApB,aACGD,EAAKN,OAAO,0B,qBCmElBQ,MAjEf,WAAe,MAEWC,mBAAS,IAFpB,mBAEN9B,EAFM,KAEA+B,EAFA,KAIPhC,EAAUiC,mBACd,iBAAM,CACJ,CAEEC,OAAQ,YAERlC,QAAS,CACP,CACEkC,OAAQ,UACRC,SAAU,gBACVC,KAAM,gBAAWC,EAAX,EAAGT,KAAQS,MAAX,OACJ,qBACEC,IAAKD,EACLE,MAAO,OAIb,CACEL,OAAQ,aACRC,SAAU,aACVK,aAAc,SAACC,EAAQjB,GAAT,OACNA,EAAIiB,EAAOC,IAAIC,WAAWF,EAAOJ,QACjCb,EAAIiB,EAAOC,IAAIE,SAASH,EAAOJ,SAEzC,CACEH,OAAQ,YACRC,SAAU,aAEZ,CACED,OAAQ,QACRC,SAAU,SAEZ,CACED,OAAQ,eACRC,SAAU,cAKlB,IAYF,OARAU,qBAAU,WACR,sBAAC,4BAAAC,EAAA,sEACsBC,IAAM,yCAD5B,OACOC,EADP,OAECC,QAAQC,IAAIF,EAAO/C,KAAKkD,SACxBnB,EAAQgB,EAAO/C,KAAKkD,SAHrB,0CAAD,KAKC,IAGD,qBAAKhC,UAAU,MAAf,SACE,cAAC,EAAD,CAAOnB,QAASA,EAASC,KAAMA,EAC/BmD,YAAU,EACVC,oBAAqB,SAACZ,EAAQjB,GAAT,OACnB8B,OAAO9B,EAAIiB,EAAOC,OAASD,EAAOJ,YCxI1CkB,IAASjC,OACP,cAAC,IAAMkC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.8d802a73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useTable, useFilters, useState, useSortBy } from \"react-table\";\r\nimport Bootstrap from \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport MaUTable from \"@material-ui/core/Table\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\n\r\nexport default function Table({ columns, data }) {\r\n  // const [filterInput, setFilterInput] = useState(\"\");\r\n  // console.log(filterInput);\r\n\r\n  // Use the useTable Hook to send the columns and data to build the table\r\n  const {\r\n    getTableProps, // table props from react-table\r\n    getTableBodyProps, // table body props from react-table\r\n    headerGroups, // headerGroups, if your table has groupings\r\n    rows, // rows for the table based on the data passed\r\n    prepareRow, // Prepare the row (this function needs to be called for each row before getting the row props)\r\n    // setFilter // The useFilter Hook provides a way to set the filter\r\n  } = useTable(\r\n    {\r\n    columns,\r\n    data\r\n  },\r\n  // useFilters,\r\n  useSortBy // Adding the useFilters Hook to the table\r\n  // You can add as many Hooks as you want. Check the documentation for details. You can even add custom Hooks for react-table here\r\n  );\r\n\r\n  \r\n\r\n  // Update the state when input changes\r\n  // const handleFilterChange = e => {\r\n  //   const value = e.target.value || undefined;\r\n  //   console.log(value)\r\n  //   setFilter(\"name.first\", value);\r\n  //   setFilterInput(value);\r\n  // };\r\n\r\n  // // Input element\r\n  // <input\r\n  //   value={filterInput}\r\n  //   onChange={handleFilterChange}\r\n  //   placeholder={\"Search name\"}\r\n  // />\r\n  /* \r\n    Render the UI for your table\r\n    - react-table doesn't have UI, it's headless. We just need to put the react-table props from the Hooks, and it will do its magic automatically\r\n  */\r\n  return (\r\n    \r\n    <MaUTable {...getTableProps()}>\r\n      <TableHead>\r\n        {headerGroups.map(headerGroup => (\r\n          <TableRow {...headerGroup.getHeaderGroupProps()}>\r\n            {headerGroup.headers.map(column => (\r\n              <TableCell {...column.getHeaderProps(column.getSortByToggleProps())}\r\n              className={\r\n                column.isSorted\r\n                  ? column.isSortedDesc\r\n                    ? \"sort-desc\"\r\n                    : \"sort-asc\"\r\n                  : \"\"\r\n              }>\r\n                {column.render(\"Header\")}\r\n              </TableCell>\r\n            ))}\r\n          </TableRow>\r\n        ))}\r\n      </TableHead>\r\n      <TableBody>\r\n        {rows.map((row, i) => {\r\n          prepareRow(row);\r\n          return (\r\n            <TableRow {...row.getRowProps()}>\r\n              {row.cells.map(cell => {\r\n                return (\r\n                  <TableCell {...cell.getCellProps()}>\r\n                    {cell.render(\"Cell\")}\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          );\r\n        })}\r\n      </TableBody>\r\n    </MaUTable>\r\n  );\r\n};\r\n// {...column.getHeaderProps(column.getSortByToggleProps())}\r\n// className={\r\n//   column.isSorted\r\n//     ? column.isSortedDesc\r\n//       ? \"sort-desc\"\r\n//       : \"sort-asc\"\r\n//     : \"\"\r\n// }","// import reactDom from \"react-dom\";\r\n// import EC from \"./components/employeeCard\";\r\n// import API from \"./utlities/api\";\r\n// import React, { Component } from \"react\";\r\n// import SearchBar from \"./components/searchbar/index\";\r\n\r\n\r\n// const App = () => {\r\n\r\n// }\r\n// class App extends Component {\r\n//   state = {\r\n//     result: [],\r\n//     search: \"\",\r\n//     searchResult: []\r\n//   };\r\n\r\n//   handleInputChange = (e) => {\r\n//       this.setState({\r\n//       search: e.target.value\r\n//     })\r\n//   }\r\n\r\n//   handleFormSubmit = (e) => {\r\n//     e.preventDefault();\r\n//       const filteredEmployee = this.state.result.filter((employee) => {\r\n//         return employee.name.first.includes(this.state.search) || employee.name.last.includes(this.state.search);\r\n//       })\r\n//       this.setState({ searchResult: filteredEmployee})\r\n//   }\r\n\r\n//   componentDidMount() {\r\n//     API.getEmployees()\r\n//     // .then(res => console.log(res))\r\n//     .then(res => this.setState({ result: res.data.results}))\r\n//   };\r\n//   render(){\r\n//     if (this.state.result < 1) {\r\n//       return(<div>Loading...</div>)  \r\n//     }\r\n//     else {\r\n//       return(\r\n//         <>\r\n//         <SearchBar \r\n//           handleInputChange={this.handleInputChange} \r\n//           handleFormSubmit={this.handleFormSubmit} \r\n//           search={this.state.search}\r\n//         />\r\n      \r\n//         {this.state.result.map((employee) => {\r\n//           return (\r\n//             <div className=\"App\" key={employee.email}>\r\n//               <EC employee={employee}/>\r\n              \r\n//             </div>\r\n//           )\r\n          \r\n//         })\r\n//       }\r\n//       </>  \r\n//       )\r\n//   } \r\n//   }\r\n// }\r\n\r\n// export default App;\r\n\r\n\r\n// js sort objects to sort by name\r\n\r\n// \r\n\r\nimport React, { useMemo, useState, useEffect } from \"react\";\r\nimport ReactTable from \"react-table-6\";  \r\nimport \"react-table-6/react-table.css\" \r\nimport Table from \"./components/tablecomponent/table\";\r\nimport axios from \"axios\";\r\nimport 'react-table-6/react-table.css';\r\n\r\n\r\n// import \"./App.css\";\r\n\r\nfunction App() {\r\n  // data state to store the TV Maze API data. Its initial value is an empty array\r\n  const [data, setData] = useState([]);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        // first group - TV Show\r\n        Header: \"Employees\",\r\n        // First group columns\r\n        columns: [\r\n          {\r\n            Header: \"Picture\",\r\n            accessor: \"picture.large\",\r\n            Cell: ({ cell: { value } }) => (\r\n              <img\r\n                src={value}\r\n                width={60}\r\n              />\r\n            )\r\n          },\r\n          {\r\n            Header: \"First Name\",\r\n            accessor: \"name.first\",\r\n            filterMethod: (filter, row) =>\r\n                    row[filter.id].startsWith(filter.value) &&\r\n                    row[filter.id].endsWith(filter.value)\r\n          },\r\n          {\r\n            Header: \"Last name\",\r\n            accessor: \"name.last\"\r\n          },\r\n          {\r\n            Header: \"Email\",\r\n            accessor: \"email\"\r\n          },\r\n          {\r\n            Header: \"Phone Number\",\r\n            accessor: \"phone\"\r\n          },\r\n        ]\r\n      }\r\n    ],\r\n    []\r\n  );\r\n\r\n  // Using useEffect to call the API once mounted and set the data\r\n  useEffect(() => {\r\n    (async () => {\r\n      const result = await axios(\"https://randomuser.me/api/?results=20\");\r\n      console.log(result.data.results);\r\n      setData(result.data.results);\r\n    })();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Table columns={columns} data={data} \r\n      filterable\r\n      defaultFilterMethod={(filter, row) =>\r\n        String(row[filter.id]) === filter.value} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport Bootstrap from \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}